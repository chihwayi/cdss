package zw.org.mohcc.cdss.rules.hiv;

import zw.org.mohcc.cdss.model.dto.PatientArtData;
import zw.org.mohcc.cdss.model.dto.ClinicalDecision;
import zw.org.mohcc.cdss.model.dto.ArtStatus;
import zw.org.mohcc.cdss.model.dto.WhoStage;
import zw.org.mohcc.cdss.model.dto.Investigation;
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.List;

global java.util.List decisions;

// Helper function to calculate age
function int calculateAge(LocalDate birthDate) {
    return Period.between(birthDate, LocalDate.now()).getYears();
}

// Rule for Advanced HIV Disease (AHD) screening
rule "Advanced HIV Disease Screening"
    when
        $patient: PatientArtData()
        $status: ArtStatus(state == "START_ARV" || state == "CHANGE") from $patient.statuses
        $stage: WhoStage(whoStage == "THREE" || whoStage == "FOUR") from $status.whoStages
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("AHD_SCREENING");
        decision.setRecommendation("Initiate AHD package: CD4 count, TB-LAM, CrAg screening required");
        decision.setUrgency("HIGH");
        decision.setRationale("WHO Stage " + $stage.getWhoStage() + " indicates possible AHD");
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end

// Rule for First-line ART regimen
rule "First-line ART Regimen Recommendation"
    when
        $patient: PatientArtData()
        $status: ArtStatus(state == "START_ARV", regimenLineName == "FIRST_LINE") from $patient.statuses
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("REGIMEN_RECOMMENDATION");
        decision.setRecommendation("Recommend TDF + 3TC + DTG as preferred first-line regimen");
        decision.setUrgency("HIGH");
        decision.setRationale("WHO 2021 guidelines recommend DTG-based regimens as preferred first-line ART");
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end

// Rule for Viral Load Monitoring - Fixed version
rule "Viral Load Monitoring Schedule"
    when
        $patient: PatientArtData()
        $status: ArtStatus(state == "CONTINUE") from $patient.statuses
        eval(ChronoUnit.MONTHS.between($status.getDate(), LocalDate.now()) >= 6)
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("MONITORING");
        decision.setRecommendation("Schedule viral load test");
        decision.setUrgency("MEDIUM");
        decision.setRationale("WHO recommends viral load monitoring every 6 months");
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end

// Rule for TB Screening
rule "TB Screening Requirement"
    when
        $patient: PatientArtData()
        $status: ArtStatus() from $patient.statuses
        not Investigation(type == "TB_SCREENING") from $status.investigations
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("TB_SCREENING");
        decision.setRecommendation("Perform TB screening");
        decision.setUrgency("HIGH");
        decision.setRationale("WHO recommends TB screening for all PLHIV at each visit");
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end

// Rule for Treatment Failure Assessment
rule "Treatment Failure Assessment"
    when
        $patient: PatientArtData()
        $status: ArtStatus(treatmentFailureReason != null) from $patient.statuses
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("TREATMENT_FAILURE");
        decision.setRecommendation("Conduct resistance testing and consider switch to second-line therapy");
        decision.setUrgency("HIGH");
        decision.setRationale("Suspected treatment failure: " + $status.getTreatmentFailureReason());
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end

// Rule for Adherence Support
rule "Adherence Support"
    when
        $patient: PatientArtData()
        $status: ArtStatus(state == "CONTINUE") from $patient.statuses
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("ADHERENCE");
        decision.setRecommendation("Provide adherence counseling and support");
        decision.setUrgency("MEDIUM");
        decision.setRationale("Regular adherence support is essential for treatment success");
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end

// Rule for Opportunistic Infection Prophylaxis
rule "OI Prophylaxis"
    when
        $patient: PatientArtData()
        $status: ArtStatus() from $patient.statuses
        $stage: WhoStage(whoStage == "THREE" || whoStage == "FOUR") from $status.whoStages
    then
        ClinicalDecision decision = new ClinicalDecision();
        decision.setRecommendationType("OI_PROPHYLAXIS");
        decision.setRecommendation("Initiate/continue cotrimoxazole prophylaxis");
        decision.setUrgency("HIGH");
        decision.setRationale("WHO Stage " + $stage.getWhoStage() + " requires OI prophylaxis");
        decision.setEvaluationDate(LocalDate.now());
        decisions.add(decision);
end